#!/usr/bin/env python

"""
Description:
This node has 3 services that allows one to control the Interbotix px100 
robot arm, to pick and place an object without colliding into objects and 
follow waypoints, using moveit!



Services:
    follow (follow): Follows waypoints in the waypoints parameter
    reset (reset): resets the objects to its location and sets the 
                    robot to its home setting
    step (step): takes in specific point location and gripper pose 
                 and return values that say whether the the point can be 
                 reached or not

"""

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import os
import yaml

from geometry_msgs.msg import PoseStamped, Point, Pose
from moveit_msgs.msg import MoveItErrorCodes
from std_srvs.srv import Empty, EmptyResponse
from arm_move.srv import step, reset, follow, stepResponse, resetResponse, followResponse

class Mover():

    def __init__(self):
        # Initiliaze move it group to command robot and scenes
        moveit_commander.roscpp_initialize(sys.argv)

        self.robot = moveit_commander.RobotCommander()

        self.scene = moveit_commander.PlanningSceneInterface()

        self.move_group = moveit_commander.MoveGroupCommander("interbotix_arm")

        self.gripper_group = moveit_commander.MoveGroupCommander("interbotix_gripper")

        # rospy.sleep(3)
        # create services follow, reset and step
        self.follow = rospy.Service("follow",follow, self.follow_callback)
        self.reset = rospy.Service("reset", reset, self.reset_callback)
        self.step = rospy.Service("step",step, self.step_callback)

        # get waypoint parameter
        self.waypoints = rospy.get_param('/waypoints')
        # self.dir = os.path.realpath('..')
        # print(self.dir)
        # self.yml = os.path.join(self.dir, '/config/waypoints.yaml')

        # spawn table
        self.addtable()

        

    def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
        """This functions waits for the objects to load onto the scene 
            Adapted from the moveit api
            Args:
            box_is_known (bool): whether the box is known to exist or not
            box_is_attached (bool): to see if the box is attached to the robot
        """
        box_name = self.box_name
        scene = self.scene
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            # Test if the box is in attached objects
            attached_objects = scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0

            # Test if the box is in the scene.
            # Note that attaching the box will remove it from known_objects
            is_known = box_name in scene.get_known_object_names()

            # Test if we are in the expected state
            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True

            # Sleep so that we give other threads time on the processor
            rospy.sleep(0.1)
            seconds = rospy.get_time()

            # If we exited the while loop without returning then we timed out
            return False


    def addtable(self):
        """ Adds table below the robot in rviz scene
            Args: None

        """
        # rospy.sleep(1)
        self.box_pose = PoseStamped()
        self.box_pose.header.frame_id = "world"
        self.box_pose.pose.orientation.w = 1.0
        self.box_pose.pose.position.x = 0.0
        self.box_pose.pose.position.y = 0.0
        self.box_pose.pose.position.z = -0.01  # above the world frame
        self.box_name = "table"

        while not self.wait_for_state_update(box_is_known = True):
            self.scene.add_box(self.box_name, self.box_pose, size=(0.5, 0.5, 0.01))

    def addbox(self):
        """ Adds box to the predetermined position and orientation onto the scene
            Args: None
        """
        # rospy.sleep(1)
        self.box_pose = PoseStamped()
        self.box_pose.header.frame_id = "world"
        self.box_pose.pose.orientation.w = 1.0
        self.box_pose.pose.position.x = 0.15
        self.box_pose.pose.position.y = 0.0
        self.box_pose.pose.position.z = 0.05  # above the world frame
        self.box_name = "box"

        while not self.wait_for_state_update(box_is_known = True):
            self.scene.add_box(self.box_name, self.box_pose, size=(0.1, 0.1, 0.1))

    def addobject(self):
        """ Adds object to the predetermined position and orientation onto the scene
            Args: None
        """
        # rospy.sleep(1)
        self.box_pose = PoseStamped()
        self.box_pose.header.frame_id = "world"
        self.box_pose.pose.orientation.w = 1.0
        self.box_pose.pose.position.x = 0.1
        self.box_pose.pose.position.y = 0.1
        self.box_pose.pose.position.z = 0.1  # above the world frame
        self.box_name = "object"

        while not self.wait_for_state_update(box_is_known = True):
            self.scene.add_cylinder(self.box_name, self.box_pose, height = 0.04, radius = 0.01)

    def follow_callback(self, req):
        """ Follows waypoints that are set to the waypoints
            Args: 
            iter (int): the number of times you want the robot to follow all waypoints
            returns: []
        """
        
        for i in range(req.iter):
            for i in self.waypoints:
                # rospy.sleep(1)
                rospy.logerr(i)
                self.move_group.set_position_target(i[0:3])
                self.move_group.go()
                self.gripper_group.set_named_target(i[3])
                self.gripper_group.go()
                

        return followResponse()


    def reset_callback(self, req, timeout=4):
        """ Resets the scene by spawning the objects to the scene 
            Args: 
            clear_waypoints (bool): whether to clear waypoints that are loaded onto the parameter 
                                    or not
            returns: []
        """
        # adds the box to the scene
        self.addbox()
        self.addobject()

        # makes the robot go to its home position
        self.move_group.set_named_target('Home')
        self.move_group.go()
        self.gripper_group.set_named_target('Open')
        self.gripper_group.go()

        if req.clear_waypoints:
            self.waypoints = []   

        return resetResponse()
        

    
    def step_callback(self, req):
        """ Checks if a position can be reached and returns if its a success or not
            It goes to that position if it can be reached
            Args: 
            position (Point): the x,y,z coordinates of the point to be reached 
            gripper_pose (bool): whether the gripper should be closed or open
            returns:
            error (MoveItErrorCodes): returns val with -1 if failure and 1 if success

        """
        x = req.point.x
        y = req.point.y
        z = req.point.z
        xyz = [x,y,z]
        self.move_group.set_position_target(xyz)
        # rospy.logerr(xyz)
        

        [err, plan_msg, plan_time, error_code] = self.move_group.plan()
        # rospy.logerr(err)
        if error_code.val == 1:

            self.move_group.execute(plan_msg,wait='true')
            self.move_group.go()
            
            if req.gripper_pose:
                self.gripper_group.set_named_target('Closed')
                str = 'Closed'
            else:
                self.gripper_group.set_named_target('Open')
                str = 'Open'
            
            xyz.append(str)
            self.waypoints.append(xyz)
            rospy.logerr(self.waypoints)
            rospy.set_param('waypoints',self.waypoints)
        
        # file = open(self.yml,"w")
        # dictionary = {"waypoints":self.waypoints}
        # yaml.dump(dictionary,file)
        # file.close()

        return error_code


def main():
    rospy.init_node("Mover")
    Mover()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass